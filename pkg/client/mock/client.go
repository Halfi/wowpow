// Code generated by MockGen. DO NOT EDIT.
// Source: wowpow/pkg/client (interfaces: Dialer,Computer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	dialer "wowpow/internal/pkg/dialer"
	pow "wowpow/internal/pkg/pow"

	gomock "github.com/golang/mock/gomock"
)

// MockDialer is a mock of Dialer interface.
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
}

// MockDialerMockRecorder is the mock recorder for MockDialer.
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance.
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockDialer) Dial() (dialer.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial")
	ret0, _ := ret[0].(dialer.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockDialerMockRecorder) Dial() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockDialer)(nil).Dial))
}

// MockComputer is a mock of Computer interface.
type MockComputer struct {
	ctrl     *gomock.Controller
	recorder *MockComputerMockRecorder
}

// MockComputerMockRecorder is the mock recorder for MockComputer.
type MockComputerMockRecorder struct {
	mock *MockComputer
}

// NewMockComputer creates a new mock instance.
func NewMockComputer(ctrl *gomock.Controller) *MockComputer {
	mock := &MockComputer{ctrl: ctrl}
	mock.recorder = &MockComputerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputer) EXPECT() *MockComputerMockRecorder {
	return m.recorder
}

// Compute mocks base method.
func (m *MockComputer) Compute(arg0 context.Context, arg1 *pow.Hashcach, arg2 int64) (*pow.Hashcach, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compute", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pow.Hashcach)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compute indicates an expected call of Compute.
func (mr *MockComputerMockRecorder) Compute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compute", reflect.TypeOf((*MockComputer)(nil).Compute), arg0, arg1, arg2)
}
